// Generated by gencpp from file buggy_robot/State.msg
// DO NOT EDIT!


#ifndef BUGGY_ROBOT_MESSAGE_STATE_H
#define BUGGY_ROBOT_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Time.h>

namespace buggy_robot
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : stamp()
    , x(0.0)
    , x_dot(0.0)  {
    }
  State_(const ContainerAllocator& _alloc)
    : stamp(_alloc)
    , x(0.0)
    , x_dot(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Time_<ContainerAllocator>  _stamp_type;
  _stamp_type stamp;

   typedef double _x_type;
  _x_type x;

   typedef double _x_dot_type;
  _x_dot_type x_dot;





  typedef boost::shared_ptr< ::buggy_robot::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::buggy_robot::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::buggy_robot::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::buggy_robot::State > StatePtr;
typedef boost::shared_ptr< ::buggy_robot::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::buggy_robot::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::buggy_robot::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::buggy_robot::State_<ContainerAllocator1> & lhs, const ::buggy_robot::State_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.x == rhs.x &&
    lhs.x_dot == rhs.x_dot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::buggy_robot::State_<ContainerAllocator1> & lhs, const ::buggy_robot::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace buggy_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::buggy_robot::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::buggy_robot::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::buggy_robot::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::buggy_robot::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::buggy_robot::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::buggy_robot::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::buggy_robot::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f7c1e71ff724a5e596d059e9f465816";
  }

  static const char* value(const ::buggy_robot::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f7c1e71ff724a5eULL;
  static const uint64_t static_value2 = 0x596d059e9f465816ULL;
};

template<class ContainerAllocator>
struct DataType< ::buggy_robot::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "buggy_robot/State";
  }

  static const char* value(const ::buggy_robot::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::buggy_robot::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Time stamp\n"
"float64 x\n"
"float64 x_dot\n"
"================================================================================\n"
"MSG: std_msgs/Time\n"
"time data\n"
;
  }

  static const char* value(const ::buggy_robot::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::buggy_robot::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.x);
      stream.next(m.x_dot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::buggy_robot::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::buggy_robot::State_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    s << std::endl;
    Printer< ::std_msgs::Time_<ContainerAllocator> >::stream(s, indent + "  ", v.stamp);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "x_dot: ";
    Printer<double>::stream(s, indent + "  ", v.x_dot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BUGGY_ROBOT_MESSAGE_STATE_H
